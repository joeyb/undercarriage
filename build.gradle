buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

plugins {
    id 'nebula.project' version '3.2.0'
    id 'nebula.provided-base' version '3.1.0'
}

apply plugin: 'com.github.ben-manes.versions'

subprojects { project ->
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'

    apply plugin: 'checkstyle'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.contacts'
    apply plugin: 'nebula.info'
    apply plugin: 'nebula.javadoc-jar'
    apply plugin: 'nebula.provided-base'
    apply plugin: 'nebula.source-jar'

    group 'org.joeyb.undercarriage'

    sourceCompatibility = 1.8

    dependencies {
        provided "org.immutables:value:$immutablesVersion"

        compile "javax.inject:javax.inject:$javaxInjectVersion"

        testCompile "junit:junit:$junitVersion"
        testCompile "org.assertj:assertj-core:$assertjVersion"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
    }

    checkstyle {
        configFile = file("$rootDir/gradle/checkstyle/checkstyle.xml")
        toolVersion = '6.18'
    }

    idea {
        module {
            def generatedMainDir = file('src/main/generated')
            def generatedTestDir = file('src/test/generated_tests')

            sourceDirs += generatedMainDir
            testSourceDirs += generatedTestDir

            generatedSourceDirs += generatedMainDir
            generatedSourceDirs += generatedTestDir
        }
    }

    jacoco {
        toolVersion = '0.7.6.201602180812'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    check.dependsOn jacocoTestReport

    project.tasks.withType(Javadoc) {
        failOnError = false
    }
    project.tasks.withType(Test) { Test testTask ->
        testTask.testLogging.exceptionFormat = 'full'
    }
}
